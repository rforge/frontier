THIS IS THE CHANGELOG OF THE "frontier" PACKAGE

Please note that only the most significant changes are reported here.
A full ChangeLog is available in the log messages of the SVN repository
on R-Forge.


            CHANGES IN VERSION 0.995-6

* modified sfa() so that it works with version 0.2-0 of the "Formula" package


            CHANGES IN VERSION 0.995-4

* added data set "telecom" that contains data on telecommunications
providers in 21 countries in 1990


            CHANGES IN VERSION 0.995-0

* added new user interface: function "sfa" (instead of "frontier") should be
used for Stochastic Frontier Analysis (SFA) now; its user interface is much
more similar to the standard regression tool in R "lm"; function "frontier",
which is a wrapper to "sfa" now, is kept for compatibility with older versions

* functions "sfa" (and hence also "frontier", "frontierQuad" etc.) no longer
calculate and return efficiency estimates

* function "sfa" no longer has argument "logDepVar", because this information
is irrelevant for the estimation

* method "efficiencies" for objects of class "frontier" calculates
efficiency estimates now (instead of just extracting them)

* method "efficiencies" for objects of class "frontier" has the argument
"logDepVar" now, which indicates whether the dependent variable is logged
(this information is required to calculate the efficiency estimates)

* method "summary" for objects of class "frontier" calculates and returns
the efficiency estimates now (the calculation is done by the "efficiencies"
method, see above)

* method "summary" for objects of class "frontier" has the argument
"logDepVar" now, which indicates whether the dependent variable is logged
(this information is required to calculate the efficiency estimates)

* added "residuals" method for objects of class "frontier" to obtain the
residuals

* fixed bug in the Fortran subroutine "der1" that calculates the derivatives
of the likelihood function of the "Error Components Frontier" (ECF): in case
of unbalanced panel data, uninitialized values (for unobserved observations)
were used in the calculation so that the derivatives were wrong

* fixed bug in the Fortran code: in case of unbalanced panel data, the
efficiency estimates of the missing observations were set to the previously
calculated efficiency estimate (mostly the efficiency estimate of the
previous firm in the same year)

* added further tests in /tests/frontierTest.R


            CHANGES IN VERSION 0.991-2

* fixed bug #469: it is possible (again) now to estimate frontiers
with argument "ineffDecrease" set to FALSE (e.g. cost frontiers)

* the ratio between the density function and the cumulative distribution
function ("den(a)/dis(a)") is calculated by "dexp(denlog(a)-dislog(a))"
now, because the new approach is capable to calculate this ratio even
if "a" is smaller than -37.5


            CHANGES IN VERSION 0.991-0

* removed argument "modelType": the model type is derived from argument
"zNames" (NULL or not NULL) now

* the C function "pnorm", which is included in the R software, is used instead
of the Fortran function "dis", which is included in the Frontier 4.1 software,
to calculate the cumulative distribution of the standard normal distribution

* the C function "dnorm", which is included in the R software, is used instead
of the Fortran function "den", which is included in the Frontier 4.1 software,
to calculate the density of the standard normal distribution

* the logarithm of the density function of the standard normal distribution
is calculated directly with the C function "pnorm" with argument "give_log"
equal to 1 (TRUE) now

* the parameters of the X variables are no longer named "beta_0", "beta_1",
"beta_2" etc. but "(Intercept)", "<varName1>", "<varName2>" etc.
(as returned by lm())

* the parameters of the Z variables are no longer named "delta_0", "delta_1",
"delta_2" etc. but "Z_(Intercept)", "Z_<varName1>", "Z_<varName2>" etc.

* the "logLik" method for objects of class "frontier" has a new argument
"newParam" now: if this argument is provided by the user, the log-likelihood
value of the model 'object' is calculated with these (new) parameters

* added argument "muBound": in case of an Error Components Frontier (ECF)
with the inefficiency terms "u" following a truncated normal distribution
with mean "mu", argument "muBound" can be used to restrict "mu" to be in
the interval "+/- muBound * sigma_u", where "sigma_u" is the standard
deviation of "u".


            CHANGES IN VERSION 0.99-2

* argument 'maxit' can be zero now


            CHANGES IN VERSION 0.99-0

* corrected and considerably improved documentation of function "fontier"

* changed order of arguments of function "frontier"

* removed arguments "crossSectionName" and "timePeriodName" from function
"frontier": in case of cross-section data, these variables (information) are
not needed, and in case of panel data, the information on the panel structure
has to be added to the data set by the function "plm.data" of the "plm" package

* argument "modelType" of function "frontier" must be "ECF" or "EEF" now

* replaced argument "funtionType" of function "frontier"
by argument "ineffDecrease"

* renamed argument "eta" of function "frontier" as "timeEffect"

* split argument "mu" of function "frontier" into "truncNorm"
and "zIntercept"

* increased default value of argument "maxit" of function "frontier" to 1000

* renamed argument "step1" of function "frontier" as "searchStep"

* renamed argument "tol2" of function "frontier" as "searchTol"

* replaced argument "indic" of function "frontier" by "searchScale"

* renamed argument "gridno" of function "frontier" as "gridSize"

* renamed argument "igrid2" of function "frontier" as "gridDouble"

* renamed argument "iprint" of function "frontier" as "printIter"

* removed arguments "qxNames" and "quadHalf" from function "frontier",
because quadratic or translog frontiers can be estimated with function
"frontierQuad" now

* added "logLik" method for objects of class "frontier"

* added function "frontierQuad" for estimating quadratic and translog frontiers

* added function "frontierTranslogRay" for estimating stochastic ray
translog frontier functions

* added the generic function "efficiencies" and corresponding methods
for default objects and objects of class "frontier"

* added "elas" method for objects of class "frontierQuad"

* function frontier() and frontierQuad() return the (matched) call now

* the matrix of efficiency estimates returned by "frontier" has row names
(cross section units) and possibly column names (time period) now



            CHANGES IN VERSION 0.9-9 AND BEFORE

* please take a look at the log messages of the SVN repository on R-Forge